POPUP.JS


//Llenar select
$(document).ready(function(){
  obtenerSessionId();
  mostrarBotonRegistrarse();
  DesplegarListas();
  EventoAgregarProductoLista();
  EventoPanelNuevaLista();
  EventoAdministrarLista();
  eventoSelect();
  DesplegarProductos($( "#selectLista" ).val());
  traerProductosServidor();
  
});

function traerProductosServidor(){

  getearSessionId().then(id => {
    if(id != 0){
      console.log("entro a traerProductosSevidor,id igual a "+id);
      var clienteServidor = {
        idSession: id
      }
      var request = $.ajax({
        type: "POST",
        url: "http://localhost:3000/productosCliente",
        data: clienteServidor,
        error: function(xhr, status, error){
          console.log("Error al contactar con el servidor, xhr: " + xhr.status);
        }
      });
      request.done(function(response) {
        // for(i=0; i<response.prods.length; i++){
        //   console.log(response.prods[i].nombre) +"\n\n";
        // }
        // obtenerSessionIdABM(response.sessionId);
        compararProductos(response.prods);
      });
    }
 });
}


/*
function traerProductosServidor(){
  fetch('http://localhost:3000/productosCliente').then(data => data.text()).then(data =>{
      var i = data;
      console.log("productos servidor: " + i);
      if(i.length !== 0){
        compararProductos(i);
      }
  });
}*/


async function compararProductos(productosServidor){
console.log("entro a comparar productos");
  var p1 = new Promise(function(resolve, reject){     
    chrome.storage.sync.get(null, function(items){
      var allkeys = Object.keys(items);
      
      for(var i=0; i<allkeys.length; i++){

        var p2 = new Promise(function(resolve, reject){
          var prods = [];
          chrome.storage.sync.get(allkeys[i], function (lista) { //Obtiene la lista
            $.map(lista, function(productosEnLista, nombreLista) { //Obtiene los productos en la lista
              $.map(productosEnLista, function(producto, llaveProducto) {  //Separa a los productos
                $.map(producto, function(datosProducto, categoryID) {
                  prods.push(producto);
                });
              });
            });

            resolve(prods);
          });           
        });
        async function traerProds(p2){
          return await (p2);
        };  
        var prods2 = traerProds(p2);    
      }
        
      resolve(prods2);       
    });
  });

  const productosSync = await(p1);
  console.log("productosSync: " + Object.values(productosSync));
  console.log("productosServidor: " + Object.values(productosServidor));



  cont = 0;
  productosSyncNuevos = [];

  for(var i=0; i<productosSync.length; i++){
    for(var j=0; j<productosServidor.length; j++){

      var productoSync = Object.values(productosSync[i]);
      var atributosProductoSync = productoSync[0];
      console.log("productoSync: " + productoSync);
      console.log("productoSync[0]: " + productoSync[0]);
      console.log(productoSync.title + " " + productosServidor[j].nombre);
      
      console.log("atributosProductoSync[5]: " + atributosProductoSync[5] + "\n productosServidor[j].id: " + productosServidor[j].id);
      if(atributosProductoSync[5] == productosServidor[j].id){
        if(atributosProductoSync[0] != productosServidor[j].nombre ||
          atributosProductoSync[2] != productosServidor[j].activo  ||
          atributosProductoSync[1] != productosServidor[j].precio){
            console.log("\n\n\n Un producto cambio de valor: \n Producto sync:" + productosSync[i] + "\n Producto servicdor:" +productosServidor[j] +"\n");
            actualizarProducto(atributosProductoSync, productosServidor[j]);

            cont=0;
        }
        else{
          cont=0;
        }
      }
      else{
        cont++;
      }
    }
    if(cont == productosServidor.length){
      console.log("cont: " + cont + "\n productosServidor.length: " + productosServidor.length);
      productosSyncNuevos.push(productosSync[i]);
    }
  }
  
  if(productosSyncNuevos.length !== 0){
    console.log("productosSyncNuevos: " + productosSyncNuevos.length);
    agregarProductosFaltantes(productosSyncNuevos);
  }

}

async function actualizarProducto(productoSync, productoServidor){
  console.log("entro a actualizarProducto \n");
  var productosLista = [];
  var listaNueva = {};
  var listaSeleccionada = productoServidor.nombre_lista;
  
  chrome.storage.sync.get(listaSeleccionada, function (lista) { //Obtiene la lista
            
    $.map(lista, function(productosEnLista, listaSeleccionada) { //Obtiene los productos en la lista
            
            
      $.map(productosEnLista, function(producto, llaveProducto) {  //Separa a los productos
              
              
        $.map(producto, function(datosProducto, categoryID) { //Separa a los datos del producto
          if(productoSync[5] !== categoryID){
            productosLista.push(producto);
          }

        });
      });
    });

    listaNueva[listaSeleccionada] = productosLista;        
    chrome.storage.sync.remove(listaSeleccionada);
    chrome.storage.sync.set(listaNueva);
    
    var diccionarioProducto = {};       
    var key = productoSync[5];  

    diccionarioProducto[key]= productoServidor;   

      

    chrome.storage.sync.get(function(cfg) {
      if(typeof(cfg[listaSeleccionada]) !== 'undefined' && cfg[listaSeleccionada] instanceof Array) { 
        cfg[listaSeleccionada].push(diccionarioProducto);
      } 
     chrome.storage.sync.set(cfg); 
     console.log("se seteo la lista con el productos nuevo");
    });

  });

}

async function agregarProductosFaltantes(productosSyncNuevos){
  for(var k=0; k<productosSyncNuevos.length; k++){

    var p1 = new Promise(function(resolve, reject){  
      var listaProducto
      chrome.storage.sync.get(null, function(items){
        var allkeys = Object.keys(items);
        
        for(var i=0; i<allkeys.length; i++){
  
          var p2 = new Promise(function(resolve, reject){
            chrome.storage.sync.get(allkeys[i], function (lista) { //Obtiene la lista
              $.map(lista, function(productosEnLista, nombreLista) { //Obtiene los productos en la lista
                $.map(productosEnLista, function(producto, llaveProducto) {  //Separa a los productos
                  $.map(producto, function(datosProducto, categoryID) {
                    if(productosSyncNuevos[k].id == categoryID){
                      listaProducto = lista;
                    }
                  });
                });
              });
  
              resolve(listaProducto);
            });           
          });
          async function traerLista(p2){
            return await p2;
          };  
          var listaProducto2 = traerLista(p2);    
        }
          
        resolve(listaProducto2);       
      });
    });
    const lista = await (p1);

    AgregarProductoNuevo(productosSyncNuevos[k], lista);
  }
}

function AgregarProductoNuevo(productoNuevo, lista){

    getearSessionId().then(id => {
      var productoServidor = {
        title: productoNuevo.title,
        price: productoNuevo.price,
        status: productoNuevo.status,
        permalink: productoNuevo.permalink,
        id: productoNuevo.id,
        nombrelista: lista,
        sessionId: id
      }
      var request = $.ajax({
        type: "POST",
        url: "http://localhost:3000/altaProducto",
        data: productoServidor,
        error: function(xhr, status, error){
          console.log("Error al contactar con el servidor, xhr: " + xhr.status);
        }
      });
      request.done(function(response) {
        console.log(response);
        obtenerSessionIdABM(response.sessionId);
      });
    });
}

function mostrarBotonRegistrarse(){
  getearSessionId().then(id => {
    if(id != 0){
      var sessionIdServidor = {
        sessionId: id
      }
      var request = $.ajax({
        type: "POST",
        url: "http://localhost:3000/usuarioRegistrado",
        data: sessionIdServidor,
        error: function(xhr, status, error){
          console.log("Error al contactar con el servidor, xhr: " + xhr.status);
        }
      });
      request.done(function(response) {
        if(response.usuario == true){
          $('#btnRegistrarse').hide();       
        }
        else{
          $('#btnRegistrarse').show();
        }
      });
    }
    else{
      $('#btnRegistrarse').show();
    }
    
  });
}

function eventoSelect(){
  $('#selectLista').on('change', function() {
    $('#productosListaUL').empty()
    DesplegarProductos($(this).val());
});

}

function obtenerSessionId(){
  setTimeout(function(){
    getearSessionId().then(id => {
      var SI;
      if(id === undefined){
        SI = 0;
      }
      else{
        SI = id;
      }
      var sessionId = {
        sessionId: SI
      }
  
      var request = $.ajax({
        type: "POST",
        url: "http://localhost:3000/session",
        data: sessionId,
        error: function(xhr, status, error){
          console.log("Error al contactar con el servidor, xhr: " + xhr.status);
        }
      });
      request.done(function(response) {
        if(SI == 0){
          chrome.storage.local.set({'sessionId_NUEVO': response.sessionID});
        }
      });
    });
    
    /*
    fetch('http://localhost:3000/session').then(data => data.text()).then(data =>{
      var i = data;
      chrome.storage.local.get(['sessionId_NUEVO'], function(result){
        if(result.sessionId_NUEVO === undefined){
          chrome.storage.local.set({'sessionId_NUEVO': i}, function() {
            console.log('sessionId_NUEVO: ' + i);
          });
        }      
      });      
    });*/
  }, 200);  
}

async function getearSessionId(){
  var p = new Promise(function(resolve, reject){
    chrome.storage.local.get(['sessionId_NUEVO'], function(result){
      var id = result.sessionId_NUEVO;
      resolve(id); 
    });
  });
  const id = await(p);
  //console.log("id: " + id);
  if(id == undefined){
    return 0;
  }
  else{
    return id;
  }
  
}

function DesplegarListas(){
  
    chrome.storage.sync.get(null, function(items) {
        var allKeys = Object.keys(items);
        $('#selectLista').empty();
        for (i = 0; i < allKeys.length; i++) {
          $("#selectLista").append(new Option(allKeys[i], allKeys[i]));
        }
    });
  
}

function CapturaCategoryID(url){
    
    var category_id = url.toString();
    var indiceM = 37; //indice donde se encuentra la M de los categoryID
    var indiceFinal = 0; //indice donde termina el categoryID; 

    if(Number.isInteger(parseInt(category_id.charAt(indiceM + 3), 10)) == false){ //verifico si el categoryID tiene '-' entre las letras y los numeros
        
      for(var i=indiceM + 4; i<indiceM + 20; i++){
        if(Number.isInteger(parseInt(category_id.charAt(i), 10)) == false){ //compruebo donde termina el categoryID (hasta encontrar un caracter que no sea un numero)
          indiceFinal = i;
          i = indiceM + 20; //para salir del for
        }
      }  
        
      category_id = category_id.substr(indiceM,3) + category_id.substr(indiceM + 4, indiceFinal - (indiceM + 4)); //obtengo el categoryID mediante substr() y los indices
        
      }
    else{ //si no tiene '-' en el categoryID
        
      for(var i=indiceM + 3; i<indiceM + 20; i++){
        verificaciones = category_id.charAt(i);
        if(Number.isInteger(parseInt(verificaciones, 10)) == false){
          indiceFinal = i;
          i = indiceM + 20;
          
        }
      }  
        
      category_id = category_id.substr(indiceM, indiceFinal-indiceM);
    }
    
    return category_id;
}

function AgregarProducto(category_id){
  var linkAPI = "https://api.mercadolibre.com/items/" + category_id + "?include_attributes=all";
              
  fetch(linkAPI).then(data => data.text()).then(data =>{
    var i = JSON.parse(data);
    
    var valorLista = $( "#selectLista" ).val(); //Lista seleccionada
    //Se agrega a una lista
    if(valorLista !== null){
    
      // ide.innerHTML = i.id;
      // nombre.innerHTML = i.title;
      // estado.innerHTML = i.status;      
      // precio.innerHTML = i.price;

      diccionariofoto = i.pictures;
      arregloFoto = diccionariofoto[Object.keys(diccionariofoto)[0]];
      foto = arregloFoto[Object.keys(arregloFoto)[2]];
      //console.log(foto);

      //Se crea el producto
      var producto = [i.title, i.price, i.status, i.permalink, foto, i.id];

      getearSessionId().then(id => {
        var productoServidor = {
          title: i.title,
          price: i.price,
          status: i.status,
          permalink: i.permalink,
          id: i.id,
          nombrelista: valorLista,
          sessionId: id
        }
        var request = $.ajax({
          type: "POST",
          url: "http://localhost:3000/altaProducto",
          data: productoServidor,
          error: function(xhr, status, error){
            console.log("Error al contactar con el servidor, xhr: " + xhr.status);
          }
        });
        request.done(function(response) {
        });
      });
      

      var diccionarioProducto = {};       
      var key = i.id;  
      diccionarioProducto[key]= producto;   

      

      chrome.storage.sync.get(function(cfg) {
        if(typeof(cfg[valorLista]) !== 'undefined' && cfg[valorLista] instanceof Array) { 
          cfg[valorLista].push(diccionarioProducto);
        } 
        chrome.storage.sync.set(cfg); 
      });

      DesplegarProductos();

    } else{
      alert('No hay listas!');
    }

  });

}

async function VerificacionExistenciaProducto(){
  
  var p2 = new Promise(function(resolve, reject){
    chrome.tabs.getSelected(null,function(tab) {
      resolve(CapturaCategoryID(tab.url));
    });
  });
  const category_id = await p2;
  
  var p = new Promise(function(resolve, reject){  
      var existe = false;
      chrome.storage.sync.get(null, function(items){
        var allkeys = Object.keys(items);
        for(var i=0; i<allkeys.length; i++){

          var p3 = new Promise(function(resolve, reject){
            chrome.storage.sync.get(allkeys[i], function (lista) { //Obtiene la lista
              $.map(lista, function(productosEnLista, nombreLista) { //Obtiene los productos en la lista
                $.map(productosEnLista, function(producto, llaveProducto) {  //Separa a los productos
                  $.map(producto, function(datosProducto, categoryID) {
                    if(categoryID === category_id){                     
                      existe = true;
                    }
                  });
                });
              });
              resolve(existe);
            });           
          });
          async function traerExiste(p3){
            return await p3;
          };  
          var existe2 = traerExiste(p3); 
          //console.log("existe2: " + existe2);     
        }
        
       resolve(existe2);
        
      });
      
  });
  
  const productoYaCargado = await p;

  //setTimeout(function(){
    //console.log("verificacion: " + productoYaCargado);

    if(productoYaCargado == false){
      AgregarProducto(category_id);
    }
    else if(productoYaCargado == true){
      alert("El producto ya se encuentra en una lista!");
    }                     
  //}, 500);
  
  
}



function EventoAgregarProductoLista(){
  $("#btnAgregarLista").click(function(){
    VerificacionExistenciaProducto();
  });
  
}


function EventoPanelNuevaLista(){
  $("#nuevaLista").click(function(){
    $("#contenedor").hide();
    $("#contenedorNuevaLista").show();
    EventoBotonRetroceso();
    EventoCrearLista();
  });
}

function EventoBotonRetroceso(){
  $("#retroceso").click(function(){
    $("#contenedorNuevaLista").hide();
    $("#contenedor").show();
  })
}

function EventoCrearLista(){
  $("#btnCrearLista").unbind().click(function() {
      var existe = false;
      var Lista = {};       
      var nombre = document.getElementById('nombreLista').value; 
      if(nombre != null && nombre != ""){
        chrome.storage.sync.get(null, function(items) {
          var allKeys = Object.keys(items);
          for (i = 0; i < allKeys.length; i++) {
              if(nombre == allKeys[i]){
                existe = true;
              }
          }
          if(existe == false){
            Lista[nombre]= [];
            chrome.storage.sync.set(Lista);
            DesplegarListas(); 

            getearSessionId().then(id => {
              var listaServidor = {
                nombre: nombre,
                sessionId: id
              }

              var request = $.ajax({
                type: "POST",
                url: "http://localhost:3000/altaLista",
                data: listaServidor,
                error: function(xhr, status, error){
                  console.log("Error al contactar con el servidor, xhr: " + xhr.status);
              }
              });
              request.done(function(response) {
              });
            });
            $("#contenedorNuevaLista").hide();
            $("#contenedor").show();        
          
          }
          else if(existe == true){
            alert("Ya hay una lista con ese nombre!");
          }
        });
      }
      else{
        alert("Ingrese un nombre");
      }
  });
}

function EventoAdministrarLista(){
  $(document).on('click','#btnAdministrarLista', function() {
  });
}


function EventoListas(){
  
  try {
    chrome.storage.sync.get(null, function(items) {
    document.querySelectorAll('.elementoLista').forEach(item => {

      $(item).on('click', function() {      
        
        $('#productosListaUL').empty()
        var nombreLista = $(this).text(); //Obtiene el nombre de li
        //console.log(nombreLista);
        DesplegarProductos(nombreLista);
      });  
    });
    });
  } catch (err) {
    console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
  }


}



function DesplegarProductos(nombreLista){
  try {
    $('#productosListaUL').empty()
    chrome.storage.sync.get(nombreLista, function (lista) { //Obtiene la lista
      var total = 0;
      $.map(lista, function(productosEnLista, nombreProducto) { //Obtiene los productos en la lista
    
          $.map(productosEnLista, function(producto, llaveProducto) {  //Separa los productos

            $.map(producto, function(datosProducto, categoryID) { //Separa los datos del producto
  
              $("#productosListaUL").append('<li class="productoEnLista" id="'+datosProducto[5]+'">'+datosProducto[0]+'</li>'); //De aca se pueden sacar los datos del producto usando el indice
              
              total = total + parseInt(datosProducto[1]);
         

         
          });

        });
        precio.innerHTML = "$ "+total;
      });
      
    });
  } catch (err) {
    console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
  }
}




///////////////////////////////////////////////////////////////////



INDEX.JS

const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const app = express();
const mysql = require('mysql2');
const cron = require('node-cron');
const fetch = require('node-fetch');
var http = require('http');
var request = require('request');
const session = require('express-session');
var MySQLStore = require('express-mysql-session')(session);
const cookieParser = require('cookie-parser');
var nodemailer = require('nodemailer');
const { access } = require('fs');

var transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'capytrack@gmail.com',
    pass: '/Capytrack20'
  }
});

var options = {
  hots: 'localhost',
  port: 3306,
  user: 'root',
  password: '123456',
  database: 'capytrack'
};

var sessionStore = new MySQLStore(options);

const conexion = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '123456',
  database: 'capytrack'
});

app.set('port', process.env.PORT || 3000);
app.use(express.static(path.join(__dirname, '/public')));
app.use(cookieParser());
app.use(function(req, res, next) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Headers', 'Authorization, X-API-KEY, Origin, X-Requested-With, Content-Type, Accept, Access-Control-Allow-Request-Method');
  res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, DELETE');
  res.header('Allow', 'GET, POST, OPTIONS, PUT, DELETE');

  next();
});

app.use(express.json());
app.use(bodyParser.json());   
app.use(bodyParser.urlencoded({ extended: true }));
app.use(session({
  secret: 'e',
  resave: true,
  saveUninitialized: true,
  //store: sessionStore
}));


app.post('/session', (req, res) => {
  
  var id = req.sessionID;
  var sessionId = req.body.sessionId;

  if(sessionId == 0){   
    conexion.query('INSERT INTO clientes (session_id) VALUES (?);', id, (err,result)=>{
      if(err) throw err;
    });
  }
  else{
    conexion.query('SELECT COUNT(*) AS count FROM clientes WHERE session_id = ?;', sessionId, (err,result)=>{
      if(err) throw err;
      else{
        var contador = result[0].count;
        if(contador == 0){
          conexion.query('INSERT INTO clientes (session_id) VALUES (?);', sessionId, (err,result)=>{
            if(err) throw err;
          });
        }
      }
    });
  }

  
  res.json({
    status: 'success',
    sessionID: id
  });

});

/*
app.post('/updateSessionId', (req, res) => {
  var idAnterior = req.body.idAnterior;
  var idNuevo = req.body.idNuevo;
  //console.log("idsession_viejo: " + idAnterior);
  //console.log("idsession_nuevo: " + idNuevo);
  
  updateSessionId(idNuevo, idAnterior);

});

async function updateSessionId(idNuevo, idAnterior){
  //console.log("entro al update session");
  var masDeUnRegistro = false;
  var p1 = new Promise(function(resolve, reject){
    conexion.query('SELECT COUNT(*) AS count FROM sessions;', (err,result)=>{
      if(err) throw err;
      else if(result[0].count > 1){
        masDeUnRegistro = true;
      }
      resolve(masDeUnRegistro);
    });
  });

  const hacerDelete = await(p1);
  
  if(hacerDelete == true){
    conexion.query('DELETE FROM sessions WHERE session_id = ?;', idNuevo, (err,result)=>{
      if(err) throw err;
    });
  }
  
  conexion.query('UPDATE sessions SET session_id = ? WHERE session_id = ?;', [idNuevo, idAnterior], (err,result)=>{
    if(err) throw err;
    else{
      //console.log("actualizo session id");
    }
    
  });

  var sinRegistros = false;
  var p2 = new Promise(function(resolve, reject){
    conexion.query('SELECT COUNT(*) AS count FROM clientes;', (err,result)=>{
      if(err) throw err;
      else if(result[0].count == 0){
        sinRegistros = true;
      }
      resolve(sinRegistros);
    });
  });

  const guardarSession = await(p2);
  console.log("guardarSession: " + guardarSession);
  if(guardarSession == true){
    conexion.query('INSERT INTO clientes (session_id) VALUES (?);', idNuevo, (err,result)=>{
      if(err) throw err;
    });
  }
  else{
    conexion.query('UPDATE clientes SET session_id = ? WHERE session_id = ?;', [idNuevo, idAnterior], (err,result)=>{
      if(err) throw err;
    });
  }

}*/

app.post('/usuarioRegistrado', function(req, res){
    console.log(req.body);

    var sessionId = req.body.sessionId;

    conexion.query('SELECT COUNT(*) AS countClientes FROM clientes;', (err,result)=>{
      if(err) throw err;
      else{
        var countClientes = result[0].countClientes;
        if(countClientes != 0){
          conexion.query('SELECT idCliente FROM clientes WHERE session_id = ?;', sessionId, (err,result)=>{
            if(err) throw err;
            else{
              var idCliente = result[0].idCliente;
              conexion.query('SELECT COUNT(*) AS count FROM usuarios WHERE idCliente = ?;', idCliente, (err,result)=>{
                if(err) throw err;
                else{
                  if(result[0].count == 0){
                    res.json({
                      status: 'success',
                      usuario: false,
                      sessionId: req.sessionID
                    });
                  }
                  else{
                    res.json({
                      status: 'success',
                      usuario: true,
                      sessionId: req.sessionID
                    });
                  }
                }
              });
            }
          });
        }
        else{
          res.json({
            status: 'success',
            usuario: false,
            sessionId: req.sessionID
          });
        }
      }
    });
      
});


app.post('/altaProducto', function(req, res){

    console.log(req.body);
    
    var id = req.body.id;
    var nombre = req.body.title;
    var url = req.body.permalink;
    var activo;
    if(req.body.status == "active"){
      activo = true;
    }
    else{
      activo = false;
    }

    var nombrelista = req.body.nombrelista;
    var precio = req.body.price;
    var sessionId = req.body.sessionId;

    conexion.query('SELECT idCliente FROM clientes WHERE session_id = ?;', sessionId, (err,result)=>{
      if(err) throw err;
      else{
        var idCliente = result[0].idCliente;
        //console.log("idCliente: " + idCliente);
        conexion.query('INSERT INTO productos (id, nombre, url, activo, precio, nombre_lista, idCliente) VALUES (?, ?, ?, ?, ?, ?, ?);', [id, nombre, url, activo, precio, nombrelista, idCliente], (err,result)=>{
          if(err) throw err;
        });
      }
    });

    res.json({
      status: 'success',
      sessionId: req.sessionID
    });
});


app.post('/altaLista', function(req, res){
    console.log(req.body);

    var nombrelista = req.body.nombre;
    var sessionId = req.body.sessionId;

    conexion.query('SELECT idCliente FROM clientes WHERE session_id = ?;', sessionId, (err,result)=>{
      if(err) throw err;
      else{
        var idCliente = result[0].idCliente;
        conexion.query('INSERT INTO listas (nombre, idCliente) VALUES (?, ?);', [nombrelista, idCliente], (err,result)=>{
          if(err) throw err;
        });
      }
    });

    res.json({
      status: 'success',
      sessionId: req.sessionID
    });
    
});


app.post('/bajaProducto', function(req, res){
    console.log(req.body);

    var categoryID = req.body.id;
    var sessionId = req.body.sessionId;

    conexion.query('SELECT idCliente FROM clientes WHERE session_id = ?;', sessionId, (err,result)=>{
      if(err) throw err;
      else{
        var idCliente = result[0].idCliente;
        conexion.query('DELETE FROM productos WHERE id = ? AND idCliente = ?;', [categoryID, idCliente], (err,result)=>{
          if(err) throw err;
        });
      }
    });

    
    
    res.json({
      status: 'success',
      sessionId: req.sessionID
    });

});


app.post('/bajaLista', function(req, res){
    console.log(req.body);

    var nombrelista = req.body.nombre;
    var sessionId = req.body.sessionId;

    conexion.query('SELECT idCliente FROM clientes WHERE session_id = ?;', sessionId, (err,result)=>{
      if(err) throw err;
      else{
        var idCliente = result[0].idCliente;
        conexion.query('DELETE FROM productos WHERE nombre_lista = ? AND idCliente = ?;', [nombrelista, idCliente], (err,result)=>{
          if(err) throw err;
        }); 
        conexion.query('DELETE FROM listas WHERE nombre = ? AND idCliente = ?;', [nombrelista, idCliente], (err,result)=>{
          if(err) throw err;
        });
      }
    });
    
    
    res.json({
      status: 'success',
      sessionId: req.sessionID
    });
});
  

app.post('/modificarLista', function(req, res){
    console.log(req.body);

    var nombreViejo = req.body.nombreViejo;
    var nombreNuevo = req.body.nombreNuevo;
    var sessionId = req.body.sessionId;


    conexion.query('SELECT idCliente FROM clientes WHERE session_id = ?;', sessionId, (err,result)=>{
      if(err) throw err;
      else{
        var idCliente = result[0].idCliente;
        conexion.query('SET foreign_key_checks = 0;', (err,result)=>{
          if(err) throw err;
        });
        
        conexion.query('UPDATE listas SET nombre = ? WHERE nombre = ? AND idCliente = ?;', [nombreNuevo, nombreViejo, idCliente], (err,result)=>{
          if(err) throw err;
        });

        conexion.query('UPDATE productos SET nombre_lista = ? WHERE nombre_lista = ? AND idCliente = ?;', [nombreNuevo, nombreViejo, idCliente], (err,result)=>{
          if(err) throw err;
        });
          
        conexion.query('SET foreign_key_checks = 1;', (err,result)=>{
          if(err) throw err;
        });
      }
    });

    

    res.json({
      status: 'success',
      sessionId: req.sessionID
    });
});


//cuando se habilite, poner "/" antes del 1
cron.schedule("*/1 * * * *", function(){
  console.log("schedule running...");
  
  verificarPrecios();
  
});


async function verificarPrecios(){
  var prods;

  var p1 = new Promise(function(resolve, reject){
    conexion.query('SELECT id, nombre, activo, precio, nombre_lista, idCliente FROM productos;', (err,result)=>{
      if(err) throw err;
      else{
        if(result != null){
          prods = result;
        }     
      }
      resolve(prods);
    });
  });

  const productos = await p1;
  
  if(productos != null){
    for(var i=0; i<productos.length; i++){
        var linkAPI = "https://api.mercadolibre.com/items/" + productos[i].id + "?include_attributes=all";
             
        var p2 = new Promise(function(resolve, reject){
          fetch(linkAPI).then(data => data.text()).then(data =>{
            var j = JSON.parse(data);
            var estado;
            if(j.status == "active"){
              estado = true;
            }
            else{
              estado = false;
            }

            var atributosProducto = {
              price: j.price,
              status: estado
            };
          
            resolve(atributosProducto);   
          });
        });
        
        const atributos = await p2;

        if(atributos.price == productos[i].precio){
          console.log("el precio de " + productos[i].id + " sigue igual perri y es: " + atributos.price);
        }
        else if(atributos.price != productos[i].precio){
          console.log("el precio de " + productos[i].id + " cambio y es este: " + atributos.price); 

          conexion.query('UPDATE productos SET precio = ? WHERE id = ?;', [atributos.price, productos[i].id], (err,result)=>{
            if(err) throw err;
          });

          var mail;
         
          
          var usuarioRegistrado;
          var p3 = new Promise(function(resolve, reject){
            conexion.query('SELECT COUNT(*) AS count FROM usuarios WHERE idCliente = ?;', productos[i].idCliente , (err,result)=>{
              if(err) throw err;
              else{
                if(result[0].count == 1){
                  usuarioRegistrado = true;
                }
                else{
                  usuarioRegistrado = false;
                }     
              }
              resolve(usuarioRegistrado);
            });
          });
          const uRegistrado = await(p3);

          if(uRegistrado == true){
            var p4 = new Promise(function(resolve, reject){
              conexion.query('SELECT usuario FROM usuarios WHERE idCliente = ?;', productos[i].idCliente , (err,result)=>{
                if(err) throw err;
                else{
                    mail = result[0].usuario;  
                }
                resolve(mail);
              });
            });     
            const mailUsuario = await(p4);

            var textoMail = "El precio del producto " + productos[i].id + " - " + productos[i].nombre + " perteneciente a la lista " + productos[i].nombre_lista + " cambio de precio. Su precio actual es de: " + atributos.price + "$";
            
            var mailOptions = {
              from: 'capytrack@gmail.com',
              to: mailUsuario,
              subject: 'CAPYTRACK',
              text: textoMail
            };
            transporter.sendMail(mailOptions, function(error, info){
              if (error) {
                console.log(error);
              } else {
                console.log('Email sent: ' + info.response);
              }
            }); 
          }
        }
        if(atributos.status == productos[i].activo){
          var estadoActual;
          if(atributos.status == true){
            estadoActual = "active";
          }
          else{
            estadoActual = "paused";
          }

          console.log("El producto " + productos[i].id + " no cambio de estado, sigue: " + estadoActual);
        }
        else if(atributos.status != productos[i].activo){
          var estadoActual;
          if(atributos.status == true){
            estadoActual = "active";
          }
          else{
            estadoActual = "paused";
          }

          console.log("El producto " + productos[i].id + " cambio de estado a " + estadoActual);


          conexion.query('UPDATE productos SET activo = ? WHERE id = ?;', [atributos.status, productos[i].id], (err,result)=>{
            if(err) throw err;
          });

          var mail;
         
          
          var usuarioRegistrado;
          var p3 = new Promise(function(resolve, reject){
            conexion.query('SELECT COUNT(*) AS count FROM usuarios WHERE idCliente = ?;', productos[i].idCliente , (err,result)=>{
              if(err) throw err;
              else{
                if(result[0].count == 1){
                  usuarioRegistrado = true;
                }
                else{
                  usuarioRegistrado = false;
                }     
              }
              resolve(usuarioRegistrado);
            });
          });
          const uRegistrado = await(p3);

          if(uRegistrado == true){
            var p4 = new Promise(function(resolve, reject){
              conexion.query('SELECT usuario FROM usuarios WHERE idCliente = ?;', productos[i].idCliente , (err,result)=>{
                if(err) throw err;
                else{
                    mail = result[0].usuario;  
                }
                resolve(mail);
              });
            });     
            const mailUsuario = await(p4);



            var textoMail = "El producto " + productos[i].id + " - " + productos[i].nombre + " perteneciente a la lista " + productos[i].nombre_lista + " cambio de estado. Su estado actual es: " + estadoActual;
            
            var mailOptions = {
              from: 'capytrack@gmail.com',
              to: mailUsuario,
              subject: 'CAPYTRACK',
              text: textoMail
            };
            transporter.sendMail(mailOptions, function(error, info){
              if (error) {
                console.log(error);
              } else {
                console.log('Email sent: ' + info.response);
              }
            }); 
          }

        }
    }
  }
  
}


app.post('/productosCliente', (req, res)=>{
  
  var idSession = req.body.idSession;

  console.log("\n Entro a productosCliente en busca del cliente con id: "+ idSession);
  devolverProductosCliente(idSession).then(productos => {
    res.json({
      status: 'success',
      prods: productos,
      sessionId: req.sessionID
    });
  });

});
async function devolverProductosCliente(idSession){
  
  var p1 = new Promise(function(resolve, reject){
    
    conexion.query('SELECT idCliente FROM clientes WHERE session_id = ?;', idSession , (err,result)=>{
      var idCliente;
      if(err) throw err;
      else{
        idCliente = result[0].idCliente;       
      }
      resolve(idCliente);
    });
  });
  
  const idCliente = await (p1);

  var p2 = new Promise(function(resolve, reject){
    console.log("idCliente: " + idCliente);
    conexion.query('SELECT * FROM productos WHERE idCliente = ?;', idCliente , (err,result)=>{
      var prods = [];
      if(err) throw err;
      else{       
        prods = result;      
      }
      resolve (prods);
    });
  });

  const productos = await (p2);

  console.log("productos: " + Object.values(productos));
  return productos;
  
}

/*
app.get('/productosCliente', (req, res)=>{
  conexion.query('SELECT id, activo, precio, nombre_lista FROM productos;', (err,result)=>{
    if(err) throw err;
    else{
      res.send(result); 
    }
  });
});
*/
/*
app.post('/productosCliente', (req, res)=>{
  console.log(req.body);
  
  var idSession = req.body.idSession;

  
  devolverProductosCliente(idSession).then(productos => {
    //console.log("productos: " + productos);
    res.json({
      status: 'success',
      prods: productos,
      sessionId: req.sessionID
    });
  });
});
*/
/*
async function devolverProductosCliente(idSession){
  var sessionId = idSession;
  var p1 = new Promise(function(resolve, reject){
    
    conexion.query('SELECT idCliente FROM clientes WHERE session_id = ?;', sessionId , (err,result)=>{
      var idCliente;
      if(err) throw err;
      else{
        console.log("idCliente productosCliente: " + result.length);
        idCliente = result[0].idCliente;
            
      }
      resolve(idCliente);
    });
  });
  
  const idCliente = await (p1);

  var p2 = new Promise(function(resolve, reject){
    console.log("idCliente" + idCliente);
    conexion.query('SELECT * FROM productos WHERE idCliente = ?;', idCliente , (err,result)=>{
      var prods = [];
      if(err) throw err;
      else{       
        prods = result;      
      }
      resolve (prods);
    });
  });

  const productos = await (p2);

  console.log("productos: " + productos[0]);
  return productos;
  
}
*/

app.get('/', (req, res)=>{
  console.log(req.body);
  console.log(req.sessionID);
});


async function validacionUsuario(usuario, contrasena, sessionId){
  var existeUsuario = false;
  var usuarioRegistrado = false;
  var inicioSesion = false;
  
  var p1 = new Promise(function(resolve, reject){
    //'SELECT COUNT(*) AS count FROM usuarios WHERE usuario = "" OR 1 = 1 --; DROP TABLE usuarios;'
    conexion.query('SELECT COUNT(*) AS count FROM usuarios WHERE usuario = ?;', [usuario], (err,result)=>{
      if(err) throw err;
      else{
        console.log(result[0].count);
        if(result[0].count == 0){
          existeUsuario = false;
        }
        else if(result[0].count != 0){
          existeUsuario = true;
        }
        resolve(existeUsuario);
      }
    });
  });

  const existeU = await(p1);

  if(existeU == false){
    var p3 = new Promise(function(resolve, reject){
      conexion.query('SELECT idCliente FROM clientes WHERE session_id = ?;', sessionId, (err,result)=>{
        if(err) throw err;
        else{
          var idCliente = result[0].idCliente;
          console.log(idCliente);
          var p2 = new Promise(function(resolve, reject){
            conexion.query('INSERT INTO usuarios (usuario, contrasena, idCliente) VALUES (?, ?, ?);', [usuario, contrasena, idCliente], (err,result)=>{
              if(err) throw err;
              else{
                var US = true;
                resolve(US);
              }
            });
          });
          async function traerUS(p2){
            return await p2;
          }; 
          var US = traerUS(p2); 
          resolve(US);    
        }
      });
    });
    usuarioRegistrado = await(p3);
  }
  else{
    var p4 = new Promise(function(resolve, reject){
      conexion.query('SELECT contrasena FROM usuarios WHERE usuario = ?;', usuario, (err,result)=>{
        if(err) throw err;
        else{
          var is = false;
          if(result[0].contrasena == contrasena){
            is = true;
          }
        }
        resolve(is);
      });
    });
    inicioSesion = await(p4);
    usuarioRegistrado = false;
  }

  if(usuarioRegistrado = true){
    return "usuario_registrado";
  }
  else if(usuarioRegistrado == false && inicioSesion == false){
    return "usuario_no_registrado";
  }
  else if(usuarioRegistrado == false && inicioSesion == true){
    return "usuario_inicio_sesion"
  }
  
}

app.post('/altaUsuario', function(req, res){
  console.log(req.body);

  var usuario = req.body.usuario;
  var contrasena = req.body.contrasena;
  var sessionId = req.body.sessionId;
  var usuarioRegistrado;

  validacionUsuario(usuario, contrasena, sessionId).then(registrado => {
    console.log(registrado);
    usuarioRegistrado = registrado;
    res.json({
      status: 'success',
      usuarioRegistrado: usuarioRegistrado,
      sessionId: req.sessionID
    });
  });
});

app.listen(3000, () => {
  console.log('Server listening on localhost:3000');
});


//Envio de mail

/*
// app.post('/enviarMail', function(req, res){
//   
//   res.json({
//     status: 'success'
//   });
// });

app.post('/reciboMail', function(req, res){
  transporter.sendMail(req.body, function(error, info){
    if (error) {
      console.log(error);
    } else {
      console.log('Email sent: ' + info.response);
    }
  });
  res.json({
    status: 'success'
  });
});
*/




/////////////////////////////////////////////////////////////////



OPTIONS.JS


var listaSeleccionada;
var animacion1Ejecutada = false;
var animacion2Ejecutada = false; 
var elementoAnterior = "";
var productoAnterior = "";


$(document).ready(function(){

  EventosBotones();
  DesplegarListas();
  EventoListas();
  
  CrearContextMenu();
  EventoIluminar();
  obtenerSessionId();

});

async function getearSessionId(){
  var p = new Promise(function(resolve, reject){
    chrome.storage.local.get(['sessionId_NUEVO'], function(result){
      var id = result.sessionId_NUEVO;
      resolve(id); 
    });
  });
  const id = await(p);
  return id;
}

function obtenerSessionIdABM(id){
  chrome.storage.local.get(['sessionId_NUEVO'], function(result){
    var sessionId_anterior = result.sessionId_NUEVO;
    console.log("sessionId_anterior: " + sessionId_anterior);
    chrome.storage.local.set({'sessionId_NUEVO': id}, function(){
      console.log("sessionId_NUEVO: " + id);
    });
    var sessionIds = {
      idAnterior: sessionId_anterior,
      idNuevo: id
    }

    $.ajax({
      type: "POST",
      url: "http://localhost:3000/updateSessionId",
      data: sessionIds
    });

  });
 

} 

function obtenerSessionId(){
  setTimeout(function(){
    getearSessionId().then(id => {
      var SI;
      if(id === undefined){
        SI = 0;
      }
      else{
        SI = id;
      }
      var sessionId = {
        sessionId: SI
      }
  
      var request = $.ajax({
        type: "POST",
        url: "http://localhost:3000/session",
        data: sessionId,
        error: function(xhr, status, error){
          console.log("Error al contactar con el servidor, xhr: " + xhr.status);
        }
      });
      request.done(function(response) {
        if(SI == 0){
          chrome.storage.local.set({'sessionId_NUEVO': response.sessionID});
        }
      });
    });
    
    /*
    fetch('http://localhost:3000/session').then(data => data.text()).then(data =>{
      var i = data;
      chrome.storage.local.get(['sessionId_NUEVO'], function(result){
        if(result.sessionId_NUEVO === undefined){
          chrome.storage.local.set({'sessionId_NUEVO': i}, function() {
            console.log('sessionId_NUEVO: ' + i);
          });
        }      
      });      
    });*/
  }, 200);  
}


function EventosBotones(){
  $(document).on('click','#btnSeguimientos', function() {
      window.location.replace("options.html");
    });
    
  $(document).on('click','#btnSuscripciones', function() {
      window.location.replace("suscripciones.html");
  });

  $(document).on('click','#btnConfiguracion', function() {
    window.location.replace("configuracion.html");
  });
    
  $(document).on('click','#btnContacto', function() {
    window.location.replace("contacto.html");
});
}

function DesplegarListas(){
  if($( "#listasUl" ).val() !== null){
    try{
      chrome.storage.sync.get(null, function(items) {
          var allKeys = Object.keys(items);
          $("#listasUl").empty();
          for (i = 0; i < allKeys.length; i++) {
              $("#listasUl").append('<li class="elementoLista" id="'+allKeys[i]+'">'+allKeys[i]+'</li>');
              EventoIluminar("#"+allKeys[i]);
              Animacion("#"+allKeys[i]);
          }
      });
  } catch(err){
    console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
  }
  } 
}

function EventoListas(){
  
    try {
      chrome.storage.sync.get(null, function(items) {
      document.querySelectorAll('.elementoLista').forEach(item => {
  
        $(item).on('click', function() {      
          
          $('#productosUl').empty()
          var nombreLista = $(this).text(); //Obtiene el nombre de li
          listaSeleccionada = nombreLista;
          DesplegarProductos(nombreLista);
        });  
      });
      });
    } catch (err) {
      console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
    }


}

function DesplegarProductos(nombreLista){
  try {
    chrome.storage.sync.get(nombreLista, function (lista) { //Obtiene la lista
  
      $.map(lista, function(productosEnLista, nombreProducto) { //Obtiene los productos en la lista
    
          $.map(productosEnLista, function(producto, llaveProducto) {  //Separa los productos
  
            $.map(producto, function(datosProducto, categoryID) { //Separa los datos del producto
  
              $("#productosUl").append('<li class="productoEnLista" id="'+datosProducto[5]+'">'+datosProducto[0]+'</li>'); //De aca se pueden sacar los datos del producto usando el indice
              
              var idProducto = "#"+datosProducto[5];
              EventoIluminarProductos(idProducto);
              Animacion2(idProducto);
              EventoProducto(idProducto, datosProducto);
              
          });
        });
      });
    });
  } catch (err) {
    console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
  }
}

function EventoProducto(idProducto, datosProducto){
     try {
        $(idProducto).on('click', function() {
          $('#contenedorImagen').empty()
          $("#contenedorImagen").append('<img src="'+datosProducto[4]+'" class="imagenProducto" alt="celular"></img>');
          nombre.innerHTML = datosProducto[0];
          estado.innerHTML = datosProducto[2];      
          precio.innerHTML = datosProducto[1];
          urlProducto.innerHTML = '<a href="'+datosProducto[3]+'">ver</a>';
      });
     } catch (err) {
      console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
     }
}

function CrearContextMenu(){
  try {
    $(document).bind("contextmenu", function(e){
      EventoOcultarMenu();
      Comprobacion();
      EventoCambiarNombreLista();
      EventoContextMenu();
      return false;
    });
  } catch (err) {
    console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
  }
}

function EventoOcultarMenu(){
  $(window).click(function() {
    lista = false;
    producto = false;
    producto = false;
  $("#menu").hide();
    });
}

function Comprobacion(){

  try {
    $(".elementoLista").mousedown(function(e){
      if(e.button == 2){
     
        itemLista = $(e.target).text();
    
        itemSeleccionado.innerHTML = " "+itemLista;
        document.getElementById("cambiarNombreLista").style.display = "inline";
        EventoEliminarLista(itemLista);
        $("#menu").css({'display':'block', 'left':e.pageX, 'top':e.pageY});
      }
    });
  
    $(".productoEnLista").mousedown(function(e){
      if(e.button == 2){
  
        itemProducto = $(e.target).text();
        itemSeleccionado.innerHTML = " "+itemProducto;
        document.getElementById("cambiarNombreLista").style.display = "none";
        EventoEliminarProducto(itemProducto);
        $("#menu").css({'display':'block', 'left':e.pageX, 'top':e.pageY});
      }
    });
  } catch (err) {
    console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
  }
}

function EventoCambiarNombreLista(){ 
  try{
  $("#cambiarNombreLista").unbind().click(function(e){

      var resp = window.prompt("Nuevo nombre:");
      var existe = false;
      //EventoOcultarMenu();

      if(resp != null && resp != ""){
        if(typeof(resp) === 'string' || typeof(resp) === 'number'){
          console.log("nombre nuevo: " + resp);
          chrome.storage.sync.get(null, function(items) {
            var allKeys = Object.keys(items);
            for (i = 0; i < allKeys.length; i++) {
                if(resp == allKeys[i]){
                  existe = true;
                }
            }
            if(existe == false){
              var productosLista = [];
              var listaNueva = {};

              chrome.storage.sync.get(itemLista, function (lista) { //Obtiene la lista
                  
                $.map(lista, function(productosEnLista, itemLista) { //Obtiene los productos en la lista
                  
                  listaNueva[resp] = productosLista;        
                  chrome.storage.sync.remove(itemLista);
                  chrome.storage.sync.set(listaNueva);
                  
                  $.map(productosEnLista, function(producto, llaveProducto) {  //Separa a los productos
                    
                    
                    $.map(producto, function(datosProducto, categoryID) { //Separa a los datos del producto
                        productosLista.push(producto);
                    });
                  });
                  
                });
                
                listaNueva[resp] = productosLista;        
                chrome.storage.sync.remove(itemLista);
                chrome.storage.sync.set(listaNueva);
                
                getearSessionId().then(id => {
                  var listaServidor = {
                    nombreViejo: itemLista,
                    nombreNuevo: resp,
                    sessionId: id
                  }
        
                  var request = $.ajax({
                    type: "POST",
                    url: "http://localhost:3000/modificarLista",
                    data: listaServidor,
                    error: function(xhr, status, error){
                      console.log("Error al contactar con el servidor, xhr: " + xhr.status);
                    }
                  });
                  request.done(function(response) {
                  });
                });
                
              });
              location.reload();
            }
            else if(existe == true){
              alert("Ya hay una lista con ese nombre!");
            }
          });
        }
        else{
          alert("Nombre de lista invalido");
          console.log("nombre deseado: " + resp);
        }
      }
      else{
        if(resp == ""){
          alert("Nombre de lista invalido");
        }
      }
     

  });
   } catch (err) {
    console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
   }
    
}

function EventoEliminarProducto(itemProducto){
  try {
    $("#eliminar").unbind().click(function(e){
        var productosLista = [];
        var listaNueva = {};
        var existe = false;
        var id;
  
        chrome.storage.sync.get(listaSeleccionada, function (lista) { //Obtiene la lista
            
          $.map(lista, function(productosEnLista, listaSeleccionada) { //Obtiene los productos en la lista
            
            
            $.map(productosEnLista, function(producto, llaveProducto) {  //Separa a los productos
              
              
              $.map(producto, function(datosProducto, categoryID) { //Separa a los datos del producto
                if(datosProducto[0] !== itemProducto){
                  productosLista.push(producto);
                }
                else if(datosProducto[0] == itemProducto){
                  existe = true;
                  id = categoryID;
                }
              });
            });
          });

          if(existe == true){
            getearSessionId().then(idsession => {
              var productoServidor = {            
                id: id,
                sessionId: idsession
              }
  
              var request = $.ajax({
                type: "POST",
                url: "http://localhost:3000/bajaProducto",
                data: productoServidor
              });
              request.done(function(response) {
              });
            });
  
            listaNueva[listaSeleccionada] = productosLista;        
            chrome.storage.sync.remove(listaSeleccionada);
            chrome.storage.sync.set(listaNueva);
            console.log("elimino producto");
          }

        });
        
        
        setTimeout(function (){
          $('#productosUl').empty();
          DesplegarProductos(listaSeleccionada);
          console.log("desplego productos");
        }, 200);
  
      lista = false;
      producto = false;
    });
  } catch (err) {
    console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
  }
}

function EventoEliminarLista(itemLista){
  try {
    $("#eliminar").click(function(e){
        getearSessionId().then(id => {
          var listaServidor = {            
            nombre: itemLista,
            sessionId: id
          }
  
          var request = $.ajax({
            type: "POST",
            url: "http://localhost:3000/bajaLista",
            data: listaServidor
          });
          request.done(function(response) {
          });
        });
        chrome.storage.sync.remove(itemLista);
        setTimeout(function (){
          $('#listasUl').empty();
          DesplegarListas();
        }, 200);
      });
  } catch (err) {
    console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
  }
}

function EventoContextMenu(){
  try {
    $("#eliminar").mouseover(function(){
      $("#eliminar").css("background-color", "#ffffff0a");
      $("#cambiarNombreLista").css("background-color", "#3f3f3f");
    });
    $("#cambiarNombreLista").mouseover(function(){
      $("#eliminar").css("background-color", "#3f3f3f");
      $("#cambiarNombreLista").css("background-color", "#ffffff0a");
    });
    $(".contextMenu").mouseleave(function(){
      $("#eliminar").css("background-color", "#3f3f3f");
      $("#cambiarNombreLista").css("background-color", "#3f3f3f");
    });
  } catch (err) {
    console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
  }
}

function EventoIluminar(idElemento){
    try {
      $(idElemento).mouseover(function(){
        if(elementoAnterior != idElemento){
        $(idElemento).css("background", "#b1b1b12c");
        }
      });
      $(idElemento).mouseleave(function(){
        if(elementoAnterior != idElemento){
        $(idElemento).css("background", "#ffffff0a");
        }
      
      });
      $(idElemento).click(function(){
        $(idElemento).css("background", "#b1b1b156");     
        if(elementoAnterior != idElemento){
          $(elementoAnterior).css("background", "#ffffff0a");
          elementoAnterior = idElemento;
        }
        
      });
    } catch (err) {
      console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
    }
}

function EventoIluminarProductos(idElemento){
  try {
    $(idElemento).mouseover(function(){
      if(productoAnterior != idElemento){
      $(idElemento).css("background", "#b1b1b12c");
      }
    });
    $(idElemento).mouseleave(function(){
      if(productoAnterior != idElemento){
      $(idElemento).css("background", "#ffffff0a");
      }
    
    });
    $(idElemento).click(function(){
      $(idElemento).css("background", "#b1b1b156");     
      if(productoAnterior != idElemento){
        $(productoAnterior).css("background", "#ffffff0a");
        productoAnterior = idElemento;
      }
      
    });
  } catch (err) {
    console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
  }
}

function Animacion(idElemento){
  try {
    $('.productos').hide();
    $('.informacion').hide();
    $(idElemento).click(function() {
      if (!animacion1Ejecutada) {    
        $('.productos').show();
  
        $(".listas").addClass('animacion');
        $(".productos").addClass('animacion');
  
        setTimeout(function() {
          $(".listas").removeClass('animacion');
        }, 500);
      
        setTimeout(function() {
          $(".productos").removeClass('animacion');
        }, 500);
      }
      animacion1Ejecutada = true;
    });
  } catch (err) {
    console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
  }
}

function Animacion2(idElemento){
  try {
    $(idElemento).click(function() {
      if (!animacion2Ejecutada) {
        $('.informacion').show();
        $(".listas").addClass('animacion2');
        $(".productos").addClass('animacion2');
        $(".informacion").addClass('animacion2');
  
        setTimeout(function() {
          $(".listas").removeClass('animacion2');
          $(".informacion").removeClass('animacion2');
          $(".productos").removeClass('animacion2');
        }, 500);
      
        setTimeout(function() {
          $(".productos").removeClass('animacion2');
        }, 500);
  
        setTimeout(function() {
          $(".informacion").removeClass('animacion2');
        }, 500);
      }
      animacion2Ejecutada = true;
    });
  } catch (err) {
    console.log("Fallo en "+ arguments.callee.name +", error: " + err.message);
  }
 }